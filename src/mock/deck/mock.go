// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rajankumar549/DrunkTeenPattiGame/src/entity/deck (interfaces: Deck)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	card "github.com/rajankumar549/DrunkTeenPattiGame/src/entity/card"
	reflect "reflect"
)

// MockDeck is a mock of Deck interface
type MockDeck struct {
	ctrl     *gomock.Controller
	recorder *MockDeckMockRecorder
}

// MockDeckMockRecorder is the mock recorder for MockDeck
type MockDeckMockRecorder struct {
	mock *MockDeck
}

// NewMockDeck creates a new mock instance
func NewMockDeck(ctrl *gomock.Controller) *MockDeck {
	mock := &MockDeck{ctrl: ctrl}
	mock.recorder = &MockDeckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDeck) EXPECT() *MockDeckMockRecorder {
	return m.recorder
}

// FetchCards mocks base method
func (m *MockDeck) FetchCards(arg0 int64) ([]card.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchCards", arg0)
	ret0, _ := ret[0].([]card.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchCards indicates an expected call of FetchCards
func (mr *MockDeckMockRecorder) FetchCards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchCards", reflect.TypeOf((*MockDeck)(nil).FetchCards), arg0)
}

// GetTopCard mocks base method
func (m *MockDeck) GetTopCard(arg0 []card.Card) card.Card {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopCard", arg0)
	ret0, _ := ret[0].(card.Card)
	return ret0
}

// GetTopCard indicates an expected call of GetTopCard
func (mr *MockDeckMockRecorder) GetTopCard(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopCard", reflect.TypeOf((*MockDeck)(nil).GetTopCard), arg0)
}

// HasPair mocks base method
func (m *MockDeck) HasPair(arg0 []card.Card) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasPair", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasPair indicates an expected call of HasPair
func (mr *MockDeckMockRecorder) HasPair(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasPair", reflect.TypeOf((*MockDeck)(nil).HasPair), arg0)
}

// IsTrail mocks base method
func (m *MockDeck) IsTrail(arg0 []card.Card) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTrail", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTrail indicates an expected call of IsTrail
func (mr *MockDeckMockRecorder) IsTrail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTrail", reflect.TypeOf((*MockDeck)(nil).IsTrail), arg0)
}

// IsValidSequence mocks base method
func (m *MockDeck) IsValidSequence(arg0 []card.Card) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidSequence", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsValidSequence indicates an expected call of IsValidSequence
func (mr *MockDeckMockRecorder) IsValidSequence(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidSequence", reflect.TypeOf((*MockDeck)(nil).IsValidSequence), arg0)
}

// ReadTwoUpperCard mocks base method
func (m *MockDeck) ReadTwoUpperCard() (card.Card, card.Card) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadTwoUpperCard")
	ret0, _ := ret[0].(card.Card)
	ret1, _ := ret[1].(card.Card)
	return ret0, ret1
}

// ReadTwoUpperCard indicates an expected call of ReadTwoUpperCard
func (mr *MockDeckMockRecorder) ReadTwoUpperCard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadTwoUpperCard", reflect.TypeOf((*MockDeck)(nil).ReadTwoUpperCard))
}

// ShowOrder mocks base method
func (m *MockDeck) ShowOrder() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShowOrder")
}

// ShowOrder indicates an expected call of ShowOrder
func (mr *MockDeckMockRecorder) ShowOrder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowOrder", reflect.TypeOf((*MockDeck)(nil).ShowOrder))
}

// Shuffle mocks base method
func (m *MockDeck) Shuffle() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shuffle")
}

// Shuffle indicates an expected call of Shuffle
func (mr *MockDeckMockRecorder) Shuffle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shuffle", reflect.TypeOf((*MockDeck)(nil).Shuffle))
}
