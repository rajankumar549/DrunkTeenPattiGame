// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rajankumar549/DrunkTeenPattiGame/src/entity/player (interfaces: Player)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	card "github.com/rajankumar549/DrunkTeenPattiGame/src/entity/card"
	deck "github.com/rajankumar549/DrunkTeenPattiGame/src/entity/deck"
	player "github.com/rajankumar549/DrunkTeenPattiGame/src/entity/player"
	reflect "reflect"
)

// MockPlayer is a mock of Player interface
type MockPlayer struct {
	ctrl     *gomock.Controller
	recorder *MockPlayerMockRecorder
}

// MockPlayerMockRecorder is the mock recorder for MockPlayer
type MockPlayerMockRecorder struct {
	mock *MockPlayer
}

// NewMockPlayer creates a new mock instance
func NewMockPlayer(ctrl *gomock.Controller) *MockPlayer {
	mock := &MockPlayer{ctrl: ctrl}
	mock.recorder = &MockPlayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlayer) EXPECT() *MockPlayerMockRecorder {
	return m.recorder
}

// GetCards mocks base method
func (m *MockPlayer) GetCards() []card.Card {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards")
	ret0, _ := ret[0].([]card.Card)
	return ret0
}

// GetCards indicates an expected call of GetCards
func (mr *MockPlayerMockRecorder) GetCards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockPlayer)(nil).GetCards))
}

// GetName mocks base method
func (m *MockPlayer) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockPlayerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockPlayer)(nil).GetName))
}

// IsTieWinner mocks base method
func (m *MockPlayer) IsTieWinner(arg0 player.Player, arg1 deck.Deck) player.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTieWinner", arg0, arg1)
	ret0, _ := ret[0].(player.Result)
	return ret0
}

// IsTieWinner indicates an expected call of IsTieWinner
func (mr *MockPlayerMockRecorder) IsTieWinner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTieWinner", reflect.TypeOf((*MockPlayer)(nil).IsTieWinner), arg0, arg1)
}

// IsWinner mocks base method
func (m *MockPlayer) IsWinner(arg0 player.Player, arg1 deck.Deck) player.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsWinner", arg0, arg1)
	ret0, _ := ret[0].(player.Result)
	return ret0
}

// IsWinner indicates an expected call of IsWinner
func (mr *MockPlayerMockRecorder) IsWinner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsWinner", reflect.TypeOf((*MockPlayer)(nil).IsWinner), arg0, arg1)
}

// PickCards mocks base method
func (m *MockPlayer) PickCards(arg0 []card.Card) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PickCards", arg0)
}

// PickCards indicates an expected call of PickCards
func (mr *MockPlayerMockRecorder) PickCards(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PickCards", reflect.TypeOf((*MockPlayer)(nil).PickCards), arg0)
}
